@page "/optionsdata"

@inject IHttpClientFactory _clientFactory

<p>Current count: @currentCount</p>

<h3 align="center" style="color: darkgray;">Options Data</h3>

<div align="center">
    <input type="text" @bind-value="@searchTerm" />
    <input type="button" value="Search" @onclick="@Search" />
</div>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2">@errorString</div>
}
else if (optmodel is null)
{
    <div class="h4" align="center"> Loading...</div>
}
else
{
    <div class="container text-center">
        <div class="row">
            @*<table align="center"><tr><td>*@
            <table class="table table-hover table-dark col-sm m-5">
                <thead style="border-radius: 10px">
                    <tr style="background-color: darkcyan">
                        <th>Strike (X)</th>
                        <th>Call Price (C)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cOpt in optmodel.optionChain.result.FirstOrDefault().options.FirstOrDefault().calls)
                    {
                        @* Console.WriteLine(cOpt); *@
                        IncrementCount();
                        <tr>
                            <td>@cOpt.strike</td>
                            <td>@cOpt.lastPrice</td>
                        </tr>
                    }
                </tbody>
            </table>
            @*</td><td>*@
            <table class="table table-hover table-dark col-sm m-5">
                <thead>
                    <tr style="background-color: darkred">
                        <th>Strike (X)</th>
                        <th>Put Price (P)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pOpt in optmodel.optionChain.result.FirstOrDefault().options.FirstOrDefault().puts)
                    {
                        <tr>
                            <td>@pOpt.strike</td>
                            <td>@pOpt.lastPrice</td>
                        </tr>
                    }
                </tbody>
            </table>
            @*</td></tr></table>*@
        </div>
    </div>
}
@code {
    OptionsDataModel optmodel;
    string errorString;
    string searchTerm;
    Thread thread;

    @* protected override async Task OnInitializedAsync()
        { } *@
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
    protected async Task Search()
    {
        var client = _clientFactory.CreateClient("options");

        while (true)
        {
            try
            {
                optmodel = await client.GetFromJsonAsync<OptionsDataModel>(searchTerm);
                errorString = null;
                InvokeAsync(() => StateHasChanged());
            }
            catch (Exception e)
            {
                errorString = $"There was an error: {e.Message}";
            }

            await Task.Delay(1000);
        }
    }
}
